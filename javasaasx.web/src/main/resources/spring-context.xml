<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:jdbc="http://www.springframework.org/schema/jdbc"  
	xmlns:jee="http://www.springframework.org/schema/jee" xmlns:tx="http://www.springframework.org/schema/tx"
    xmlns:util="http://www.springframework.org/schema/util" xmlns:task="http://www.springframework.org/schema/task" xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
		http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-4.0.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.0.xsd
		http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-4.0.xsd"
	default-lazy-init="true" >

	<description>Spring Configuration</description>

    <!-- 加载配置属性文件 -->
	<context:property-placeholder ignore-unresolvable="true" location="classpath:system.properties" />

	<!-- 使用Annotation自动注册Bean，解决事物失效问题：在主容器中不扫描@Controller注解 -->
	<context:component-scan base-package="com.choudou5.javasaasx.service.impl"><!-- base-package 如果多个，用“,”分隔 -->
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
	</context:component-scan>


	<!-- 数据源配置, 使用 BoneCP 数据库连接池 -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
		<!-- 数据源驱动类可不写，Druid默认会自动根据URL识别DriverClass -->
		<property name="driverClassName" value="${jdbc.driver}" />
		<!-- 基本属性 url、user、password -->
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />

		<!-- 配置初始化大小、最小、最大 -->
		<property name="initialSize" value="${jdbc.pool.init}" />
		<property name="minIdle" value="${jdbc.pool.minIdle}" />
		<property name="maxActive" value="${jdbc.pool.maxActive}" />

		<!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait" value="60000" />
		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="300000" />

		<property name="validationQuery" value="${jdbc.testSql}" />
		<property name="testWhileIdle" value="true" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />

		<!-- 打开PSCache，并且指定每个连接上PSCache的大小（Oracle使用）
		<property name="poolPreparedStatements" value="true" />
		<property name="maxPoolPreparedStatementPerConnectionSize" value="20" /> -->

		<!-- 配置监控统计拦截的filters -->
		<property name="filters" value="stat" />
	</bean>

	<!-- 数据源配置, 不使用连接池
	<bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" value="${jdbc.driver}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}"/>
		<property name="password" value="${jdbc.password}"/>
	</bean>-->


	<!-- MyBatis begin -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource"/>
		<property name="typeAliasesPackage" value="com.choudou5.javasaasx.dao"/>
		<property name="typeAliasesSuperType" value="com.choudou5.javasaasx.base.bean.BasePo"/>
		<property name="mapperLocations" value="classpath*:mybatis/mappings/**/*.xml"/>
		<property name="configLocation" value="classpath:/mybatis/mybatis-config.xml"></property>
	</bean>
	<!-- 扫描basePackage下所有以@MyBatisDao注解的接口 -->
	<bean id="mapperScannerConfigurer" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
		<property name="basePackage" value="com.choudou5.javasaasx.dao"/>
		<property name="annotationClass" value="com.choudou5.javasaasx.base.orm.mybatis.MyBatisDao"/>
	</bean>

	<!-- 定义事务 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<!-- 配置 Annotation 驱动，扫描@Transactional注解的类定义事务  -->
	<tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true"/>
	<!-- MyBatis end -->

	<!-- 配置 JSR303 Bean Validator 定义 -->
	<bean id="validator" class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean" />


	<!-- 线程池 -->
	<bean id="taskExecutor" class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
		<property name="corePoolSize" value="${task.corePoolSize}" /><!-- 核心线程数 -->
		<property name="maxPoolSize" value="${task.maxPoolSize}" /><!-- 最大线程数 -->
		<property name="queueCapacity" value="${task.queueCapacity}" /><!-- 队列最大长度  -->
		<property name="keepAliveSeconds" value="${task.keepAliveSeconds}" /><!-- 线程池维护线程所允许的空闲时间 (秒)， 即 线程空闲时间超过n秒会关闭-->
		<property name="rejectedExecutionHandler">
			<bean class="java.util.concurrent.ThreadPoolExecutor$CallerRunsPolicy" />
		</property>
		<!-- 线程池对拒绝任务(无线程可用)的处理策略：
			 AbortPolicy （默认）中，处理程序遭到拒绝将抛出运行时RejectedExecutionException。
			 CallerRunsPolicy 中，线程调用运行该任务的execute 本身。此策略提供简单的反馈控制机制，能够减缓新任务的提交速度。
			 DiscardPolicy 中，不能执行的任务将被删除。
			 DiscardOldestPolicy 中，如果执行程序尚未关闭，则位于工作队列头部的任务将被删除，然后重试执行程序（如果再次失败，则
		-->
	</bean>

	<!-- 缓存配置-->
	<bean id="cacheManager" class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean">
		<property name="configLocation" value="classpath:cache/ehcache.xml" />
	</bean>

	<bean id="globalCacheHelper" class="com.choudou5.javasaasx.common.cache.GlobalCacheHelper"/>

	<bean id="dingTalkAuthService" class="com.com.choudou5.message.dingtalk.service.DingTalkAuthServiceImpl" >
		<property name="cache" ref="globalCacheHelper" />
		<property name="corpId" value="${dingtalk.corpId}"/>
		<property name="corpSecret" value="${dingtalk.corpSecret}"/>
	</bean>

	<bean id="dingTalkChatService" class="com.com.choudou5.message.dingtalk.service.DingTalkChatServiceImpl" >
		<property name="authService" ref="dingTalkAuthService" />
	</bean>

	<!--GlobalCacheHelper.getGlobalInstance()-->

	<bean id="springContextHolder" class="com.choudou5.javasaasx.base.util.SpringContextHolder" lazy-init="false" destroy-method="destroy" autowire="byType"  />

	<import resource="spring-context-shiro.xml"/>
</beans>